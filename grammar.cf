comment "{";
comment "{*" "*}" ; 

entrypoints P;

Prog.               P ::= PBlock [DclBlock] BEBlock ".";
ProgBlock.          PBlock ::= "program" Ident ";" ;

BegEndBlock.        BEBlock ::= "begin" [Stmt] "end" ;

StmtDecl.           Stmt ::= DclBlock ;
StmtComp.           Stmt ::= BEBlock ;
StmtAssign.         Stmt ::= EXPR ":=" EXPR;
StmtCall.           Stmt ::= Call ;
StmtSelect.         Stmt ::= SelStmt ;
StmtIter.           Stmt ::= IterStmt;
StmtReturn.         Stmt ::= Return;
StmtBreak.          Stmt ::= "break";
StmtContinue.       Stmt ::= "continue";

separator Stmt ";";

StmtIf.             SelStmt ::= "if" EXPR "then" Stmt ;
StmtIfElse.         SelStmt ::= "if" EXPR "then" Stmt "else" Stmt;

StmtWhileDo.        IterStmt ::= "while" EXPR "do" Stmt;
StmtRepeat.         IterStmt ::= "repeat" Stmt "until" EXPR;

StmtFor.            IterStmt ::= "for" Stmt ForDirection EXPR "do" Stmt ;
rules               ForDirection ::= "to" | "downto";

Ret.                Return ::= "return" EXPR;

rules               DclBlock ::= PcBlock | VrBlock | FcBlock | CsBlock;

--TODO: controlla se deve essere effettivamente terminator
terminator DclBlock ";";

ProcBlock.          PcBlock ::= "procedure" Ident Prms ";" BEBlock;
FuncBlock.          FcBlock ::= "function" Ident Prms ":" Type ";" BEBlock ;

Params.             Prms ::= "(" [Prm] ")";
NoParams.           Prms ::= ;
Param.              Prm ::= Modality [IdElem] ":" Type;
Modality_ref.       Modality ::= "var";
Modality_val.       Modality ::= {-empty-};

separator nonempty Prm "," ;

CallArgs.           Call ::= Ident "(" [EXPR] ")";
separator EXPR ",";

VarBlock.           VrBlock ::= "var" [VrDef];
VarDefinition.      VrDef ::= [IdElem] ":" Type;
separator nonempty VrDef "," ;

ConstBlock.         CsBlock ::= "const" [CsDef];
--TODO: valutare quali tipi possono essere costanti
--TODO: forse possibile iniziallizzare con una costante prima definita; possiamo valutare pi√π tardi; [NON FONDAMENTALE]
ConstDefinition.    CsDef ::= IdElem "=" Literal;
separator nonempty CsDef ",";

IdElement.          IdElem ::= Ident;
separator nonempty IdElem ",";

rules               Boolean ::= "true" | "false" ;

rules               Type ::= BaseType | CompType;  
rules               BaseType ::= "integer" | "boolean" | "real" | "char" | "string" ;
rules               CompType ::= "array" "[" Integer ".." Integer "]" "of" Type | "^" Type ;

coercions EXPR 12;

SelExpr.            EXPR ::=  EXPR1 "?" EXPR ":" EXPR;
Or.                 EXPR1 ::= EXPR1 "or" EXPR2;
And.                EXPR2 ::= EXPR2 "and" EXPR3;
Not.                EXPR3 ::= "not" EXPR4;

Eq.                 EXPR4 ::= EXPR5 "=" EXPR5 ;
NotEq.              EXPR4 ::= EXPR5 "<>" EXPR5;
LessT.              EXPR4 ::= EXPR5 "<" EXPR5;
EqLessT.            EXPR4 ::= EXPR5 "<=" EXPR5;
GreatT.             EXPR4 ::= EXPR5 ">" EXPR5;
EqGreatT.           EXPR4 ::= EXPR5 ">=" EXPR5;

Sub.                EXPR5 ::= EXPR5 "-" EXPR6;
Add.                EXPR6 ::= EXPR6 "+" EXPR7;
Div.                EXPR7 ::= EXPR7 "/" EXPR8;
Mul.                EXPR8 ::= EXPR8 "*" EXPR9;
Mod.                EXPR9 ::= EXPR9 "mod" EXPR10;

Negation.           EXPR10 ::= "-" EXPR11;
Reference.          EXPR10 ::= "@" EXPR11;
Dereference.        EXPR10 ::= EXPR11 "^";

ExprCall.           EXPR11 ::= Call;

ExprLiteral.        EXPR12 ::= Literal;
BaseExpr.           EXPR12 ::= BEXPR;

ArrayElem.          BEXPR ::= EXPR12 "[" EXPR "]";
Identifier.         BEXPR ::= Ident;


rules Literal ::= Integer | String | Char | Double | Boolean ;
