-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParGrammar
  ( happyError
  , myLexer
  , pP
  ) where

import Prelude

import qualified AbsGrammar
import LexGrammar

}

%name pP P
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '('         { PT _ (TS _ 1)  }
  ')'         { PT _ (TS _ 2)  }
  '*'         { PT _ (TS _ 3)  }
  '+'         { PT _ (TS _ 4)  }
  ','         { PT _ (TS _ 5)  }
  '-'         { PT _ (TS _ 6)  }
  '.'         { PT _ (TS _ 7)  }
  '..'        { PT _ (TS _ 8)  }
  '/'         { PT _ (TS _ 9)  }
  ':'         { PT _ (TS _ 10) }
  ':='        { PT _ (TS _ 11) }
  ';'         { PT _ (TS _ 12) }
  '<'         { PT _ (TS _ 13) }
  '<='        { PT _ (TS _ 14) }
  '<>'        { PT _ (TS _ 15) }
  '='         { PT _ (TS _ 16) }
  '>'         { PT _ (TS _ 17) }
  '>='        { PT _ (TS _ 18) }
  '@'         { PT _ (TS _ 19) }
  '['         { PT _ (TS _ 20) }
  ']'         { PT _ (TS _ 21) }
  '^'         { PT _ (TS _ 22) }
  'and'       { PT _ (TS _ 23) }
  'array'     { PT _ (TS _ 24) }
  'begin'     { PT _ (TS _ 25) }
  'boolean'   { PT _ (TS _ 26) }
  'char'      { PT _ (TS _ 27) }
  'const'     { PT _ (TS _ 28) }
  'do'        { PT _ (TS _ 29) }
  'else'      { PT _ (TS _ 30) }
  'end'       { PT _ (TS _ 31) }
  'false'     { PT _ (TS _ 32) }
  'function'  { PT _ (TS _ 33) }
  'if'        { PT _ (TS _ 34) }
  'integer'   { PT _ (TS _ 35) }
  'mod'       { PT _ (TS _ 36) }
  'not'       { PT _ (TS _ 37) }
  'of'        { PT _ (TS _ 38) }
  'or'        { PT _ (TS _ 39) }
  'procedure' { PT _ (TS _ 40) }
  'program'   { PT _ (TS _ 41) }
  'real'      { PT _ (TS _ 42) }
  'repeat'    { PT _ (TS _ 43) }
  'return'    { PT _ (TS _ 44) }
  'string'    { PT _ (TS _ 45) }
  'then'      { PT _ (TS _ 46) }
  'true'      { PT _ (TS _ 47) }
  'until'     { PT _ (TS _ 48) }
  'var'       { PT _ (TS _ 49) }
  'while'     { PT _ (TS _ 50) }
  L_Ident     { PT _ (TV $$)   }
  L_charac    { PT _ (TC $$)   }
  L_doubl     { PT _ (TD $$)   }
  L_integ     { PT _ (TI $$)   }
  L_quoted    { PT _ (TL $$)   }

%%

Ident :: { AbsGrammar.TokIdent }
Ident  : L_Ident { AbsGrammar.TokIdent (mkPosToken $1) }

Char    :: { AbsGrammar.TokChar }
Char     : L_charac { AbsGrammar.TokChar (mkPosToken $1) }

Double  :: { AbsGrammar.TokDouble }
Double   : L_doubl  { AbsGrammar.TokDouble (mkPosToken $1) }

Integer :: { AbsGrammar.TokInteger }
Integer  : L_integ  { AbsGrammar.TokInteger (mkPosToken $1) }

String  :: { AbsGrammar.TokString }
String   : L_quoted { AbsGrammar.TokString (mkPosToken $1) }

Boolean :: { AbsGrammar.TokBoolean }
Boolean
  : 'true' { AbsGrammar.TokBoolean (mkPosToken $1) }
  | 'false' { AbsGrammar.TokBoolean (mkPosToken $1) }

P :: { AbsGrammar.P }
P : PBlock ListDclBlock BEBlock '.' { AbsGrammar.Prog $1 $2 $3 }

PBlock :: { AbsGrammar.PBlock }
PBlock : 'program' Ident ';' { AbsGrammar.ProgBlock $2 }

BEBlock :: { AbsGrammar.BEBlock }
BEBlock
  : 'begin' ListBegEndStmt 'end' { AbsGrammar.BegEndBlock $2 }

BegEndStmt :: { AbsGrammar.BegEndStmt }
BegEndStmt
  : Stmt ';' { AbsGrammar.BegEndStmt1 $1 }
  | DclBlock { AbsGrammar.BegEndStmtDclBlock $1 }

ListBegEndStmt :: { [AbsGrammar.BegEndStmt] }
ListBegEndStmt
  : {- empty -} { [] } | BegEndStmt ListBegEndStmt { (:) $1 $2 }

Stmt :: { AbsGrammar.Stmt }
Stmt
  : BEBlock { AbsGrammar.StmtComp $1 }
  | EXPR ':=' EXPR { AbsGrammar.StmtAssign $1 $3 }
  | Call { AbsGrammar.StmtCall $1 }
  | SelStmt { AbsGrammar.StmtSelect $1 }
  | IterStmt { AbsGrammar.StmtIter $1 }
  | Return { AbsGrammar.StmtReturn $1 }

SelStmt :: { AbsGrammar.SelStmt }
SelStmt
  : 'if' EXPR 'then' Stmt { AbsGrammar.StmtIf $2 $4 }
  | 'if' EXPR 'then' Stmt 'else' Stmt { AbsGrammar.StmtIfElse $2 $4 $6 }

IterStmt :: { AbsGrammar.IterStmt }
IterStmt
  : 'while' EXPR 'do' Stmt { AbsGrammar.StmtWhileDo $2 $4 }
  | 'repeat' Stmt 'until' EXPR { AbsGrammar.StmtRepeat $2 $4 }

Return :: { AbsGrammar.Return }
Return : 'return' EXPR { AbsGrammar.Ret $2 }

DclBlock :: { AbsGrammar.DclBlock }
DclBlock
  : PcBlock { AbsGrammar.DclBlockPcBlock $1 }
  | VrBlock { AbsGrammar.DclBlockVrBlock $1 }
  | FcBlock { AbsGrammar.DclBlockFcBlock $1 }
  | CsBlock { AbsGrammar.DclBlockCsBlock $1 }

ListDclBlock :: { [AbsGrammar.DclBlock] }
ListDclBlock
  : {- empty -} { [] } | DclBlock ListDclBlock { (:) $1 $2 }

PcBlock :: { AbsGrammar.PcBlock }
PcBlock
  : 'procedure' Ident Prms ';' BEBlock ';' { AbsGrammar.ProcBlock $2 $3 $5 }

FcBlock :: { AbsGrammar.FcBlock }
FcBlock
  : 'function' Ident Prms ':' Type ';' BEBlock ';' { AbsGrammar.FuncBlock $2 $3 $5 $7 }

Prms :: { AbsGrammar.Prms }
Prms
  : '(' ListPrm ')' { AbsGrammar.Params $2 }
  | {- empty -} { AbsGrammar.NoParams }

Prm :: { AbsGrammar.Prm }
Prm : Modality ListIdElem ':' Type { AbsGrammar.Param $1 $2 $4 }

Modality :: { AbsGrammar.Modality }
Modality
  : 'var' { AbsGrammar.Modality_var }
  | {- empty -} { AbsGrammar.Modality1 }

ListPrm :: { [AbsGrammar.Prm] }
ListPrm : Prm { (:[]) $1 } | Prm ',' ListPrm { (:) $1 $3 }

Call :: { AbsGrammar.Call }
Call : Ident '(' ListEXPR ')' { AbsGrammar.CallArgs $1 $3 }

ListEXPR :: { [AbsGrammar.EXPR] }
ListEXPR
  : {- empty -} { [] }
  | EXPR { (:[]) $1 }
  | EXPR ',' ListEXPR { (:) $1 $3 }

VrBlock :: { AbsGrammar.VrBlock }
VrBlock : 'var' ListVrDef { AbsGrammar.VarBlock $2 }

VrDef :: { AbsGrammar.VrDef }
VrDef : ListIdElem ':' Type { AbsGrammar.VarDefinition $1 $3 }

ListVrDef :: { [AbsGrammar.VrDef] }
ListVrDef
  : VrDef ';' { (:[]) $1 } | VrDef ';' ListVrDef { (:) $1 $3 }

CsBlock :: { AbsGrammar.CsBlock }
CsBlock : 'const' ListCsDef { AbsGrammar.ConstBlock $2 }

CsDef :: { AbsGrammar.CsDef }
CsDef : IdElem '=' Literal { AbsGrammar.ConstDefinition $1 $3 }

ListCsDef :: { [AbsGrammar.CsDef] }
ListCsDef
  : CsDef ';' { (:[]) $1 } | CsDef ';' ListCsDef { (:) $1 $3 }

IdElem :: { AbsGrammar.IdElem }
IdElem : Ident { AbsGrammar.IdElement $1 }

ListIdElem :: { [AbsGrammar.IdElem] }
ListIdElem
  : IdElem { (:[]) $1 } | IdElem ',' ListIdElem { (:) $1 $3 }

Type :: { AbsGrammar.Type }
Type
  : BaseType { AbsGrammar.TypeBaseType $1 }
  | CompType { AbsGrammar.TypeCompType $1 }

BaseType :: { AbsGrammar.BaseType }
BaseType
  : 'integer' { AbsGrammar.BaseType_integer }
  | 'boolean' { AbsGrammar.BaseType_boolean }
  | 'real' { AbsGrammar.BaseType_real }
  | 'char' { AbsGrammar.BaseType_char }
  | 'string' { AbsGrammar.BaseType_string }

CompType :: { AbsGrammar.CompType }
CompType
  : 'array' '[' Integer '..' Integer ']' 'of' Type { AbsGrammar.CompType1 $3 $5 $8 }
  | '^' BaseType { AbsGrammar.CompType2 $2 }

EXPR :: { AbsGrammar.EXPR }
EXPR : EXPR1 { $1 } | EXPR 'or' EXPR1 { AbsGrammar.BinaryExpression AbsGrammar.Or $1 $3 }

EXPR1 :: { AbsGrammar.EXPR }
EXPR1 : EXPR2 { $1 } | EXPR1 'and' EXPR2 { AbsGrammar.BinaryExpression AbsGrammar.And $1 $3 }

EXPR2 :: { AbsGrammar.EXPR }
EXPR2 : EXPR3 { $1 } | 'not' EXPR3 { AbsGrammar.UnaryExpression AbsGrammar.Not $2 }

EXPR3 :: { AbsGrammar.EXPR }
EXPR3
  : EXPR4 { $1 }
  | EXPR4 '=' EXPR4 { AbsGrammar.BinaryExpression AbsGrammar.Eq $1 $3 }
  | EXPR4 '<>' EXPR4 { AbsGrammar.BinaryExpression AbsGrammar.NotEq $1 $3 }
  | EXPR4 '<' EXPR4 { AbsGrammar.BinaryExpression AbsGrammar.LessT $1 $3 }
  | EXPR4 '<=' EXPR4 { AbsGrammar.BinaryExpression AbsGrammar.EqLessT $1 $3 }
  | EXPR4 '>' EXPR4 { AbsGrammar.BinaryExpression AbsGrammar.GreatT $1 $3 }
  | EXPR4 '>=' EXPR4 { AbsGrammar.BinaryExpression AbsGrammar.EqGreatT $1 $3 }

EXPR4 :: { AbsGrammar.EXPR }
EXPR4 : EXPR5 { $1 } | EXPR4 '-' EXPR5 { AbsGrammar.BinaryExpression AbsGrammar.Sub $1 $3 }

EXPR5 :: { AbsGrammar.EXPR }
EXPR5 : EXPR6 { $1 } | EXPR5 '+' EXPR6 { AbsGrammar.BinaryExpression AbsGrammar.Add $1 $3 }

EXPR6 :: { AbsGrammar.EXPR }
EXPR6 : EXPR7 { $1 } | EXPR6 '/' EXPR7 { AbsGrammar.BinaryExpression AbsGrammar.Div $1 $3 }

EXPR7 :: { AbsGrammar.EXPR }
EXPR7 : EXPR8 { $1 } | EXPR7 '*' EXPR8 { AbsGrammar.BinaryExpression AbsGrammar.Mul $1 $3 }

EXPR8 :: { AbsGrammar.EXPR }
EXPR8 : EXPR9 { $1 } | EXPR8 'mod' EXPR9 { AbsGrammar.BinaryExpression AbsGrammar.Mod $1 $3 }

EXPR9 :: { AbsGrammar.EXPR }
EXPR9
  : EXPR10 { $1 }
  | '-' EXPR10 { AbsGrammar.UnaryExpression AbsGrammar.Negation $2 }
  | '@' EXPR10 { AbsGrammar.UnaryExpression AbsGrammar.Reference $2 }
  | EXPR10 '^' { AbsGrammar.UnaryExpression AbsGrammar.Dereference $1 }

EXPR10 :: { AbsGrammar.EXPR }
EXPR10 : EXPR11 { $1 } | Literal { AbsGrammar.ExprLiteral $1 }

EXPR11 :: { AbsGrammar.EXPR }
EXPR11 : EXPR12 { $1 } | Call { AbsGrammar.ExprCall $1 }

EXPR12 :: { AbsGrammar.EXPR }
EXPR12 : EXPR13 { $1 } | BEXPR { AbsGrammar.BaseExpr $1 }

EXPR13 :: { AbsGrammar.EXPR }
EXPR13 : '(' EXPR ')' { $2 }

BEXPR :: { AbsGrammar.BEXPR }
BEXPR
  : Ident { AbsGrammar.Identifier $1 }
  | BEXPR '[' EXPR ']' { AbsGrammar.ArrayElem $1 $3 }

Literal :: { AbsGrammar.Literal }
Literal
  : Integer { AbsGrammar.LiteralInteger $1 }
  | String { AbsGrammar.LiteralString $1 }
  | Char { AbsGrammar.LiteralChar $1 }
  | Double { AbsGrammar.LiteralDouble $1 }
  | Boolean { AbsGrammar.LiteralBoolean $1 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

