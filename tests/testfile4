{In this file we want to test a basic mathematical expressions}

program HelloMath;
var a: array[1..2]of integer; 
{var b: ^real;
var c: real;
var d: boolean;
var i: integer;
function sum(x,y: real): real;
begin return x+y end;
function incr(var x: real): real;
begin return x+1 end;
begin
  {@b := a[3];
  {@b := sum(@b,a[3],true); {test chiamata funzione}
  {var aa: array [1..5] of array [1..5] of integer;
  {aa[3] := a;
  {sum(1,true);

{  a[1] := 1;
{  a[2] := 2;
{  b := @c;
{  c := 3.2;
  d := true;
  i := 1;
  c := 1.1;
  c[10] := 10;

{*
  {Test call by reference
  var pp : ^^integer;
  pp := @(@i);
  c := incr((pp^)^);
  {i := 'a'='b' or 1+1.4>2.3 ? 1 : 2;  
*}    
    
    
{* 
    {Test pointers as l-values}
    var a: integer;
    var b: integer;
    a := 8;
    b := 9;
    var c: ^integer;
    c := @a;
    @b := @a;
*}    
{*
  {Test loop
  while 1+true do
  begin
    c := 1.0;
  end;
*}  
{*
  {Test type casting char->string
  var s: string;
  s := 'a';
  function concat(x,y: string): string;
  begin return x end;
  s := concat(s,'b');
*}
{*
  {Test reference e dereference
  var a2: integer;
  var c: ^integer;
  c := a2^;
  var d: integer;
  d := @c
*}
end.

{*
The tree is:
Prog (ProgBlock (TokIdent ((3,9),"HelloMath"))) 
[DclBlockFcBlock 
    (FuncBlock 
        (TokIdent ((4,10),"incr")) 
        (Params 
            [
                Param Modality1 [IdElement (TokIdent ((4,16),"num"))] (TypeBaseType BaseType_integer)
                Param Modality1 [IdElement (TokIdent ((4,30),"num2"))] (TypeBaseType BaseType_real) 
            ]
        ) 
        (TypeBaseType BaseType_integer) 
        (BegEndBlock [StmtReturn (Ret (BinaryExpression {operator2 = Add, exp1 = BaseExpr (Identifier (TokIdent ((6,12),"num"))) (), exp2 = ExprLiteral (LiteralInteger (TokInteger ((6,16),"1"))), tp = ()}))] ())
    ),
DclBlockFcBlock 
    (FuncBlock 
        (TokIdent ((9,10),"incr")) 
        NoParams 
        (TypeBaseType BaseType_integer) 
        (BegEndBlock [StmtReturn (Ret (ExprLiteral (LiteralInteger (TokInteger ((11,12),"51")))))] ())),
DclBlockPcBlock 
    (ProcBlock 
    (TokIdent ((9,11),"incr2")) 
    (Params [Param Modality1 [IdElement (TokIdent ((9,18),"num"))] (TypeCompType (CompType2 BaseType_integer))]) 
    (BegEndBlock [StmtAssign (UnaryExpression {operator1 = Dereference, exp = BaseExpr (Identifier (TokIdent ((11,5),"num"))) (), tp = ()}) (BinaryExpression {operator2 = Add, exp1 = UnaryExpression {operator1 = Dereference, exp = BaseExpr (Identifier (TokIdent ((11,13),"num"))) (), tp = ()}, exp2 = ExprLiteral (LiteralInteger (TokInteger ((11,20),"1"))), tp = ()})] ()))] 
    (BegEndBlock [] ()
    )
*}
